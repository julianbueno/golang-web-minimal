steps:

### Build

  - id: 'build'
    name: 'gcr.io/cloud-builders/docker'
    entrypoint: 'bash'
    args: 
      - '-c'
      - |
          [[ "$BRANCH_NAME" ]] && VERSION=${BRANCH_NAME}-${SHORT_SHA}
          [[ "$TAG_NAME" ]] && VERSION=$TAG_NAME
          docker build -t gcr.io/$PROJECT_ID/$REPO_NAME:$${VERSION} .
### Test


### Publish
  - id: 'publish'
    name: 'gcr.io/cloud-builders/docker'
    entrypoint: 'bash'
    args: 
      - '-c'
      - |
          [[ "$BRANCH_NAME" ]] && VERSION=${BRANCH_NAME}-${SHORT_SHA}
          [[ "$TAG_NAME" ]] && VERSION=$TAG_NAME
          docker push gcr.io/$PROJECT_ID/$REPO_NAME:$${VERSION}

### Deploy
  - id: 'deploy'
    name: 'gcr.io/cloud-builders/gcloud'
    env:
      - 'CLOUDSDK_COMPUTE_ZONE=${_CLOUDSDK_COMPUTE_ZONE}'
      - 'CLOUDSDK_CONTAINER_CLUSTER=${_CLOUDSDK_CONTAINER_CLUSTER}'
      - 'KUBECONFIG=/kube/config'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
          CLUSTER=$$(gcloud config get-value container/cluster)
          PROJECT=$$(gcloud config get-value core/project)
          ZONE=$$(gcloud config get-value compute/zone)
          
          [[ "$BRANCH_NAME" ]] && VERSION=${BRANCH_NAME}-${SHORT_SHA}
          [[ "$TAG_NAME" ]] && VERSION=$TAG_NAME
          gcloud container clusters get-credentials "$${CLUSTER}" \
            --project "$${PROJECT}" \
            --zone "$${ZONE}"  
          if [[ "$TAG_NAME" ]] ; then
            # Production Deploy
            TARGET_ENV="prod"
            NS="default"
          elif [[ ${BRANCH_NAME} == "master" ]] ; then
            # Canary Deploy
            TARGET_ENV="canary"
            NS="default"
          else 
            # Dev Deploy
            TARGET_ENV="dev"
            NS=$${BRANCH_NAME}
            VERSION=$${BRANCH_NAME}-$${VERSION}
          fi
          sed -i 's|gcr.io/$PROJECT_ID/$REPO_NAME:.*|gcr.io/$PROJECT_ID/$REPO_NAME:$${VERSION}|' ./kubernetes/deployments/$${TARGET_ENV}/*.yaml
          
          kubectl get ns $${NS} || kubectl create ns $${NS}
          kubectl apply --namespace $${NS} --recursive -f kubernetes/deployments/$${TARGET_ENV}
          kubectl apply --namespace $${NS} --recursive -f kubernetes/services